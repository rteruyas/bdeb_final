name: Register Best Model and Upload to S3

on:
  # Run manually from the Actions tab
  workflow_dispatch:
  
  # Run on schedule (once a day at midnight UTC)
  # schedule:
  #   - cron: '0 0 * * *'

jobs:
  find-register-and-upload-model:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mlflow pandas boto3
        
    - name: Create model registration script
      run: |
        cat > register_and_upload_model.py << 'EOL'
        import os
        import mlflow
        from mlflow.tracking import MlflowClient
        import boto3
        from pathlib import Path
        import tempfile
        import shutil

        def register_best_model():
            """Find the best model based on accuracy and register it to MLflow Model Registry"""
            # Set MLflow tracking URI from environment variable
            tracking_uri = os.environ.get("MLFLOW_TRACKING_URI")
            if tracking_uri:
                mlflow.set_tracking_uri(tracking_uri)
                print(f"Using MLflow tracking URI: {tracking_uri}")
            
            print("Searching for experiments...")
            experiments = mlflow.search_experiments()
            print(f"Found {len(experiments)} experiments")
            
            # Track the best model
            best_metric_value = float('-inf')
            best_run_id = None
            best_model_name = None
            
            # The metric to compare models
            target_metric = "accuracy"
            
            print(f"Searching for final evaluation runs and comparing by {target_metric}...")
            
            # Search through all experiments
            for experiment in experiments:
                experiment_id = experiment.experiment_id
                experiment_name = experiment.name
                
                print(f"Checking experiment: {experiment_name}")
                
                # Search for runs with names ending in 'final_evaluation'
                try:
                    runs = mlflow.search_runs(
                        experiment_ids=[experiment_id],
                        filter_string="attributes.run_name LIKE '%final_evaluation'"
                    )
                except Exception as e:
                    print(f"  Error searching runs: {e}")
                    continue
                
                if len(runs) == 0:
                    print(f"  No final evaluation runs found in {experiment_name}")
                    continue
                    
                print(f"  Found {len(runs)} final evaluation runs")
                
                # Process each run to find the best model
                for _, run in runs.iterrows():
                    #print(f'Current run values: {run}')
                    run_id = run['run_id']
                    run_name = run['tags.mlflow.runName'] if 'tags.mlflow.runName' in run else run_id
                    artifact_uri = run['artifact_uri']
                    
                    # Check if the target metric exists in this run
                    metric_column = f"metrics.{target_metric}"
                    if metric_column in run:
                        metric_value = run[metric_column]
                        print(f"  Run: {run_name}, {target_metric}: {metric_value}")
                        
                        # Compare with the best metric value (assuming higher is better)
                        if metric_value > best_metric_value:
                            best_metric_value = metric_value
                            best_run_id = run_id
                            best_model_name = run_name
                            best_artifact_uri = artifact_uri
                            print(f"  New best model found: {run_name} with {target_metric}: {metric_value}")
            
            # Register the best model if found
            if best_run_id:
                print(f"\nBest model found:")
                print(f"  Model: {best_model_name}")
                print(f"  {target_metric}: {best_metric_value}")
                print(f"  Run ID: {best_run_id}")
                print(f"  Artifact uri: {best_artifact_uri}")
                
                # Register the model
                try:
                    print("\nRegistering model to MLflow Model Registry...")
                    client = MlflowClient()
                    
                    # Define a model name
                    model_name = os.environ.get("MODEL_NAME", "best_model")
                    
                    # Use the standard model path
                    model_uri = f"runs:/{best_run_id}/model"
                    print(f"Using model URI: {model_uri}")
                    
                    # Check if this run is already registered as a model version
                    print(f"Checking if run {best_run_id} is already registered...")
                    try:
                        existing_versions = client.search_model_versions(f"run_id='{best_run_id}'")
                        if existing_versions:
                            # Run is already registered
                            existing_model = existing_versions[0]
                            model_name = existing_model.name
                            version = existing_model.version
                            print(f"Model from run {best_run_id} is already registered as {model_name} version {version}")
                            
                            return best_run_id, model_name, version
                        else:
                            print(f"Run {best_run_id} is not yet registered. Proceeding with registration.")
                            
                            # Register the model
                            model_version = mlflow.register_model(
                                model_uri=model_uri,
                                name=model_name
                            )
                            version = model_version.version
                            print(f"Successfully registered model {model_name} version: {version}")
                                                
                            return best_run_id, model_name, version
                    except Exception as e:
                        print(f"Error checking if model is already registered: {str(e)}")
                        print("Proceeding with regular registration")
                        
                        # Register the model normally
                        model_version = mlflow.register_model(
                            model_uri=model_uri,
                            name=model_name
                        )
                        version = model_version.version
                        print(f"Successfully registered model version: {version}")
                        
                        # Register the model normally without promotion
                        model_version = mlflow.register_model(
                            model_uri=model_uri,
                            name=model_name
                        )
                        version = model_version.version
                        print(f"Successfully registered model version: {version}")
                        
                        return best_run_id, model_name, version
                        
                except Exception as e:
                    print(f"Error during model registration: {str(e)}")
                    raise
            else:
                print(f"\nNo models found with metric '{target_metric}' across all final evaluation runs.")
                return None, None, None

            def find_and_download_model_file(run_id):
                """Find and download model.pkl file from the run artifacts"""
                if not run_id:
                    return None
                
                try:
                    client = MlflowClient()
                    with tempfile.TemporaryDirectory() as temp_dir:
                        temp_path = Path(temp_dir)
                        download_path = client.download_artifacts(run_id, "final_model/model.pkl", dst_path=str(temp_path))
                        downloaded_file = Path(download_path)
                        with open(downloaded_file, 'rb') as f:
                            model_data = f.read()
                            return model_data
                except Exception as e:
                    print(f"Error downloading model file: {e}")
                    return None

        def upload_to_s3(model_data):
            """Upload the model data to S3"""
            if not model_data:
                print("No model data to upload")
                return False
                
            try:
                s3_bucket = os.environ.get("S3_BUCKET_NAME")
                s3_key = os.environ.get("S3_KEY_PREFIX") + "/model.pkl"
                
                if not s3_bucket:
                    print("S3_BUCKET_NAME not set. Skipping S3 upload.")
                    return False
                    
                print(f"\nUploading model.pkl to S3...")
                s3_client = boto3.client(
                    's3',
                    aws_access_key_id=os.environ.get("AWS_ACCESS_KEY_ID"),
                    aws_secret_access_key=os.environ.get("AWS_SECRET_ACCESS_KEY"),
                    region_name=os.environ.get("AWS_REGION")
                )
                
                # Create a temporary file
                with tempfile.NamedTemporaryFile(delete=False) as tmp:
                    # Write model data to the temp file
                    tmp_name = tmp.name
                    # Write directly to the already-open file
                    tmp.write(model_data)
                    # Ensure data is flushed to disk
                    tmp.flush()

                    try:
                        # Upload to S3
                        s3_client.upload_file(
                            tmp.name,
                            s3_bucket,
                            s3_key
                        )
                        print(f"SUCCESS: Uploaded model.pkl to S3")
                        print(f"S3 Location: s3://{s3_bucket}/{s3_key}")
                    finally:
                        # Clean up the temp file
                        os.unlink(tmp_name)
                return True
            except Exception as e:
                print(f"Error uploading to S3: {e}")
                return False

        if __name__ == "__main__":
            try:
                # Step 1: Register the best model
                run_id, model_name, version = register_best_model()
                
                if run_id:
                    # Step 2: Download the model file
                    model_data = find_and_download_model_file(run_id)
                    
                    if model_data:
                        # Step 3: Upload to S3
                        upload_to_s3(model_data)
                    else:
                        print("Failed to download model file")
                        exit(1)
                else:
                    print("No best model found")
                    exit(1)
            except Exception as e:
                print(f"Error: {e}")
                exit(1)
        EOL

      
    - name: Run model registration and S3 upload
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
        MODEL_NAME: "best_model"
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        S3_KEY_PREFIX: "mlflow-models"
      run: |
        python register_and_upload_model.py